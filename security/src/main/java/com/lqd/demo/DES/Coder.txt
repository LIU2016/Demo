package com.lqd.demo.DES;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.*;
import java.security.Key;

/**
 * @author lqd
 * @DATE 2018/12/12
 * @Description 加密工具类
 */
public class Coder
{

    public static void main(String[] args) throws Exception
    {
        String key = "twsm2018" ;
        String data = "123456bbbBBB看天下" ;
        byte[] mw = encryt(data.getBytes(),key.getBytes());
        System.out.println(new String(mw));
        byte[] hmw = decrypt(mw,key.getBytes());
        System.out.println(new String(hmw));

        byte[] iv = "11111111".getBytes();
        byte[] mwcbc = encrytSalt(data.getBytes(),key,iv) ;
        System.out.println(new String(mwcbc));
        byte[] ymwcbc = decrytSalt(mwcbc,key,iv) ;
        System.out.println(new String(ymwcbc));

    }

    private static Key toKey(byte[] key) throws Exception
    {
        DESKeySpec dks = new DESKeySpec(key);
        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("DES");
        return secretKeyFactory.generateSecret(dks);
    }

    /**
     * 转换密钥
     * @param key
     * @return
     * @throws Exception
     */
    private static Key toKeyDESede(byte[] key) throws Exception
    {
        DESedeKeySpec dks = new DESedeKeySpec(key);
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DESede") ;
        SecretKey secretkey = keyFactory.generateSecret(dks);
        return secretkey;
    }

    /**
     * 转换密钥
     * @param key
     * @return
     * @throws Exception
     */
    private static Key toKeyAESOrIDEA(byte[] key) throws Exception
    {
        SecretKey secretKey = new SecretKeySpec(key,"AES") ;
        return secretKey ;
    }

    /**
     * 转换密码
     * @param password
     * @return
     * @throws Exception
     */
    private static Key toKeyPBE(String password) throws Exception
    {
        PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());
        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndTripleDES") ;
        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
        return secretKey;
    }

    /**
     * 解密
     * @param data
     * @param key
     * @param ivSpec
     * @return
     * @throws Exception
     */
    public static byte[] decrytCBC(byte[] data,byte[] key,byte[] ivSpec) throws Exception {

        Key secretKey = toKey(key) ;
        Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding") ;
        IvParameterSpec ivParameterSpec = new IvParameterSpec(ivSpec) ;
        cipher.init(Cipher.DECRYPT_MODE,secretKey,ivParameterSpec);
        return cipher.doFinal(data);
    }

    /**
     * 加密
     * @param data
     * @param key
     * @param viSpec
     * @return
     * @throws Exception
     */
    public static byte[] encryCBC(byte[] data,byte[] key,byte[] viSpec) throws Exception{

        Key secretKey = toKey(key) ;
        Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
        IvParameterSpec ivParameterSpec = new IvParameterSpec(viSpec);
        cipher.init(Cipher.ENCRYPT_MODE,secretKey,ivParameterSpec);
        return cipher.doFinal(data);
    }

    /**
     * 解密
     * @param data
     * @param key
     * @return
     * @throws Exception
     */
    public static byte[] decrypt(byte[] data,byte[] key) throws Exception{
        Key secretKey = toKey(key) ;
        Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
        cipher.init(Cipher.DECRYPT_MODE,secretKey);
        return cipher.doFinal(data);
    }

    /**
     * 加密
     * @param data
     * @param key
     * @return
     * @throws Exception
     */
    public static byte[] encryt(byte[] data,byte[] key)throws Exception{
        Key secretKey = toKey(key) ;
        Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
        cipher.init(Cipher.ENCRYPT_MODE,secretKey);
        return cipher.doFinal(data) ;
    }

    public static byte[] encrytSalt(byte[] data,String password,byte[] salt) throws Exception
    {
        Key key = toKeyPBE(password) ;
        PBEParameterSpec parameterSpec = new PBEParameterSpec(salt,100) ;
        Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES") ;
        cipher.init(Cipher.ENCRYPT_MODE,key,parameterSpec);
        return cipher.doFinal(data);
    }

    public static byte[] decrytSalt(byte[] data,String password,byte[] salt) throws Exception{
        Key key = toKeyPBE(password) ;
        PBEParameterSpec pbeParameterSpec = new PBEParameterSpec(salt,100) ;
        Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");
        cipher.init(Cipher.DECRYPT_MODE,key,pbeParameterSpec);
        return cipher.doFinal(data);
    }
}
